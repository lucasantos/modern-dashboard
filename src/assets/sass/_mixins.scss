// CSS3 vendor prefix
@mixin css3-prefix($prop, $value) {
    //ex: @include css3-prefix(transform, scale3d(2.5, 2, 1.5));
    -webkit-#{$prop}: #{$value};
    -moz-#{$prop}: #{$value};
    -ms-#{$prop}: #{$value};
    -o-#{$prop}: #{$value};
    #{$prop}: #{$value};
}

@mixin vertical-center {
    //ex: @include vertical-center();
    position: relative;
    top: 50%;
    -ms-transform: translateY(-50%);
    -webkit-transform: translateY(-50%);
    transform: translateY(-50%);
}

// General fonts
@mixin general-font-face($name, $font-path: '', $file) {

    //ex: @include font-face("My Font", font-path, my-font);
    @font-face {
        font-family: "#{$name}";
        src: url("../fonts/#{$font-path}/#{$file}.eot");
        src: url("../fonts/#{$font-path}/#{$file}.eot?#iefix") format("embedded-opentype"),
        url("../fonts/#{$font-path}/#{$file}.woff") format("woff"),
        url("../fonts/#{$font-path}/#{$file}.ttf") format("truetype"),
        url("../fonts/#{$font-path}/#{$file}.svg?#webfont") format("svg");
    }
}

// Specific fonts
@mixin font-face($name, $file, $weight: normal, $style: normal) {

    //ex: @include font-face("My Font", my-font, normal, normal);
    @font-face {
        font: {
            family: #{$name};
            weight: #{$weight};
            style: #{$style};
        }

        src: url("../fonts/#{$file}.woff") format("woff"),
        url("../fonts/#{$file}.woff2") format("woff2");
    }
}

@mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
        @content;
    }

    @-moz-keyframes #{$name} {
        @content;
    }

    @keyframes #{$name} {
        @content;
    }
}

// ex:
// @include keyframes(background) {
//   0% {
//     background: white;
//   }
//   50% {
//     background: lightblue;
//   }
//   100% {
//     background: royalblue;
//   }
// }

@mixin retina-image($image, $width, $height) {

    @media (min--moz-device-pixel-ratio: 1.3),
    (-o-min-device-pixel-ratio: 2.6/2),
    (-webkit-min-device-pixel-ratio: 1.3),
    (min-device-pixel-ratio: 1.3),
    (min-resolution: 1.3dppx) {
        background-image: url($image);
        background-size: $width $height;
    }
}

// ex:
// .image {
//   background: url("my-image.png") no-repeat;
//   @include retina-image("my-image2x.png", 1000px, 500px);
// }

@mixin abs-position ($top, $right, $bottom, $left) {
    // ex: @include abs-position(100px, 100px, auto, auto);
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
}

@mixin arrow($direction: down, $size: 5px, $color: #555) {
    // Ex: @include arrow(); e @include arrow(up, 10px, #efefef);
    width: 0;
    height: 0;

    @if ($direction==left) {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    }

    @else if ($direction==right) {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    }

    @else if ($direction==down) {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-top: $size solid $color;
    }

    @else {
        border-left: $size solid transparent;
        border-right: $size solid transparent;
        border-bottom: $size solid $color;
    }
}

@mixin breakpoint($point) {
    @if $point==large {
        @media only screen and (min-width: 1366px) {
            @content;
        }
    }

    @else if $point==desktop {
        @media only screen and (min-width: 1024px) {
            @content;
        }
    }

    @else if $point==tablet {
        @media only screen and (min-width: 768px) {
            @content;
        }
    }

    @else if $point==tablet_portrait {
        @media only screen and (min-width: 768px) and (orientation: portrait) {
            @content;
        }
    }
}

// ex:
// @include breakpoint(large) {
//   div {
//      font-size: 2rem;
//      line-height: 1.4;
//   }
// }

@mixin aspect-ratio($width, $height) {
    position: relative;

    &:before {
        display: block;
        content: "";
        width: 100%;
        padding-top: ($height / $width) * 100%;
    }

    >.inner-box {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
    }
}

// ex:
// <div class="outer-box">
//    <div class="inner-box"></div>
// </div>
// .outer-box {
//   @include aspect-ratio(4, 3);
// }

@mixin text-shorten {
    //ex: @include text-shorten();
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin font-source-sans($size: false, $colour: false, $weight: false, $lh: false) {
    font-family: 'Source Sans Pro', Helvetica, Arial, sans-serif;

    @if $size {
        font-size: $size;
    }

    @if $colour {
        color: $colour;
    }

    @if $weight {
        font-weight: $weight;
    }

    @if $lh {
        line-height: $lh;
    }
}

@mixin input-placeholder {

    //ex: @include input-placeholder { color: $grey; }
    &.placeholder {
        @content;
    }

    &:-moz-placeholder {
        @content;
    }

    &::-moz-placeholder {
        @content;
    }

    &:-ms-input-placeholder {
        @content;
    }

    &::-webkit-input-placeholder {
        @content;
    }
}

@mixin box-shadow($values) {
    -webkit-box-shadow: $values; // Safari 3-4, iOS 4.0.2 - 4.2, Android 2.3+
    -moz-box-shadow: $values; // Firefox 3.5 - 3.6
    box-shadow: $values; // Opera 10.5, IE 9, Firefox 4+, Chrome 6+, iOS 5
}

@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -ms-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

@mixin border-radius($radius-top-left, $radius-top-right, $radius-bottom-left, $radius-bottom-right) {
    border-top-left-radius: $radius-top-left;
    border-top-right-radius: $radius-top-right;
    border-bottom-left-radius: $radius-bottom-left;
    border-bottom-right-radius: $radius-bottom-right;
}

// @mixin border($direction, $width, $style, $color) {
//     @content;
// }